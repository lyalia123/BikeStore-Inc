import psycopg2
import re

class QueryRunner:
    def __init__(self):
        try:
            self.conn = psycopg2.connect(
                host="localhost",
                port=5433,
                database="bikestore",
                user="postgres",
                password="Alpieva2006"
            )
            print(" –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö bikestore")
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            exit(1)
    
    def get_queries_from_file(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞ queries.sql"""
        try:
            with open('queries.sql', 'r', encoding='utf-8') as file:
                content = file.read()
            
            queries = []
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –Ω–æ–º–µ—Ä–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
            query_blocks = re.split(r'--\s*\d+\.', content)
            
            for i, block in enumerate(query_blocks[1:], 1):
                lines = block.strip().split('\n')
                
                if not lines:
                    continue
                    
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ–ø–∏—Å–∞–Ω–∏–µ
                description = lines[0].strip()
                
                # –ò—â–µ–º SQL –∫–æ–¥ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
                sql_lines = []
                in_sql = False
                
                for line in lines[1:]:
                    line = line.strip()
                    if line.startswith('--') and not in_sql:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–µ—Ä–µ–¥ SQL
                    if line and not line.startswith('--'):
                        in_sql = True
                        sql_lines.append(line)
                    elif in_sql and line.startswith('--'):
                        break  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å–ª–µ SQL - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º
                
                sql = ' '.join(sql_lines).strip()
                if sql.endswith(';'):
                    sql = sql[:-1]
                
                if sql:
                    queries.append({
                        'number': i,
                        'description': description,
                        'sql': sql
                    })
            
            return queries
        except FileNotFoundError:
            print(" –§–∞–π–ª queries.sql –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return []
    
    def format_table(self, results, colnames):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã"""
        if not results:
            print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        col_widths = []
        for i, colname in enumerate(colnames):
            max_width = len(str(colname))
            for row in results:
                cell_str = str(row[i] if row[i] is not None else 'NULL')
                max_width = max(max_width, len(cell_str))
            col_widths.append(min(max_width, 30))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        total_width = sum(col_widths) + 3 * (len(col_widths) - 1) + 2
        separator = "‚îº".join("‚îÄ" * (w + 2) for w in col_widths)
        separator = "‚îå" + separator + "‚îê"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        header = "‚îÇ"
        for i, colname in enumerate(colnames):
            header += f" {str(colname).ljust(col_widths[i])} ‚îÇ"
        print(separator)
        print(header)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
        separator = "‚îú" + "‚îº".join("‚îÄ" * (w + 2) for w in col_widths) + "‚î§"
        print(separator)
        
        # –î–∞–Ω–Ω—ã–µ
        for row in results[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 20 —Å—Ç—Ä–æ–∫–∞–º–∏
            row_str = "‚îÇ"
            for i, cell in enumerate(row):
                cell_display = str(cell if cell is not None else 'NULL')
                if len(cell_display) > 30:
                    cell_display = cell_display[:27] + "..."
                row_str += f" {cell_display.ljust(col_widths[i])} ‚îÇ"
            print(row_str)
        
        # –ù–∏–∂–Ω–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = "‚îî" + "‚î¥".join("‚îÄ" * (w + 2) for w in col_widths) + "‚îò"
        print(separator)
    
    def run_single_query(self, query_info):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å"""
        print(f"\n{'‚ïê' * 80}")
        print(f" –ó–∞–ø—Ä–æ—Å #{query_info['number']}: {query_info['description']}")
        print(f"{'‚ïê' * 80}")
        print(f" SQL: {query_info['sql']}")
        print(f"{'‚ïê' * 80}")
        
        cur = self.conn.cursor()
        try:
            cur.execute(query_info['sql'])
            
            if query_info['sql'].strip().upper().startswith('SELECT'):
                results = cur.fetchall()
                colnames = [desc[0] for desc in cur.description]
                
                print(f" –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(results)}")
                if results:
                    self.format_table(results, colnames)
                
                if len(results) > 20:
                    print(f"‚ÑπÔ∏è  –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ –∏–∑ {len(results)}")
            else:
                print(f" –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f" –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {cur.rowcount}")
            
            self.conn.commit()
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            self.conn.rollback()
        finally:
            cur.close()
    
    def run_all_queries(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥—Ä—è–¥"""
        queries = self.get_queries_from_file()
        
        if not queries:
            print("–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            return
        
        print(f"\n –ù–∞–π–¥–µ–Ω–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤. –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
        
        for i, query in enumerate(queries, 1):
            self.run_single_query(query)
            
            if i < len(queries):
                input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É...")
    
    def run_query_by_number(self, query_num):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –Ω–æ–º–µ—Ä—É"""
        queries = self.get_queries_from_file()
        
        for query in queries:
            if query['number'] == int(query_num):
                self.run_single_query(query)
                return True
        
        print(f" –ó–∞–ø—Ä–æ—Å #{query_num} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    def show_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        queries = self.get_queries_from_file()
        
        if not queries:
            print(" –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞ queries.sql")
            return
        
        while True:
            print(" –ë–ê–ó–ê –î–ê–ù–ù–´–• BIKE STORE - –ú–ï–ù–Æ –ó–ê–ü–†–û–°–û–í")
            for query in queries:
                print(f"#{query['number']}. {query['description']}")
            
            print("\n" + "‚îÄ" * 60)
            print("a - –í—ã–ø–æ–ª–Ω–∏—Ç—å –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥—Ä—è–¥")
            print(f"1-{len(queries)} - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            print("q - –í—ã—Ö–æ–¥")
            print("‚îÄ" * 60)
            
            choice = input(" –í–∞—à –≤—ã–±–æ—Ä: ").strip().lower()
            
            if choice == 'q':
                break
            elif choice == 'a':
                self.run_all_queries()
            elif choice.isdigit() and 1 <= int(choice) <= len(queries):
                self.run_query_by_number(choice)
                input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é...")
            else:
                print(" –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    def __del__(self):
        if hasattr(self, 'conn'):
            self.conn.close()

def main():
    print("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏ Bike Store")
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
    
    runner = QueryRunner()
    runner.show_menu()

if __name__ == "__main__":
    main()